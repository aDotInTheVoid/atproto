import * as url from 'url'
import { readFileSync, writeFileSync } from 'fs'
import { join } from 'path'
import { stripIndents } from 'common-tags'

const LABEL_TARGETS = {
  post: 'post',
  profile: 'post author profile',
  account: 'post author account',
  quotedPost: 'quoted post',
  quotedAccount: 'quoted post author account',
}

const __dirname = url.fileURLToPath(new URL('.', import.meta.url))

const postModerationBehaviorsDef = JSON.parse(
  readFileSync(
    join(
      __dirname,
      '..',
      '..',
      'definitions',
      'post-moderation-behaviors.json',
    ),
    'utf8',
  ),
)

writeFileSync(
  join(__dirname, '..', '..', 'docs', 'moderation-behaviors', 'posts.md'),
  posts(),
  'utf8',
)

function posts() {
  return stripIndents`
  <!-- this doc is generated by ./scripts/docs/moderation-behaviors.mjs -->

  # Post moderation behaviors
  
  This document is a reference of expected post moderation behaviors.

  ## Scenarios

  ${Array.from(Object.entries(postModerationBehaviorsDef.scenarios))
    .map(scenarioSection)
    .join('\n\n')}
  `
}

function scenarioSection([title, scenario]) {
  return stripIndents`
  ### ${title}

  <table>
    ${booleanRow('Filter Content', scenario.behaviors.content?.filter)}
    ${booleanRow(
      'Blur Content',
      scenario.behaviors.content?.blur,
      scenario.behaviors.content?.noOverride,
    )}
    ${booleanRow('Warn Content', scenario.behaviors.content?.notice)}
    ${booleanRow(
      'Blur Avatar',
      scenario.behaviors.avatar?.blur,
      scenario.behaviors.avatar?.noOverride,
    )}
    ${booleanRow('Warn Avatar', scenario.behaviors.avatar?.notice)}
    ${booleanRow(
      'Blur Embed',
      scenario.behaviors.embed?.blur,
      scenario.behaviors.embed?.noOverride,
    )}
    ${booleanRow('Warn Embed', scenario.behaviors.embed?.notice)}
    <tr><td>Labels</td><td>${describeLabels(scenario)}</td></tr>
    <tr><td>Author</td><td>${describeAuthor(
      scenario.author,
      postModerationBehaviorsDef.users[scenario.author],
    )}</td></tr>
      ${
        scenario.quoteAuthor
          ? `<tr><td>Quoted author</td><td>${describeAuthor(
              scenario.quoteAuthor,
              postModerationBehaviorsDef.users[scenario.quoteAuthor],
            )}</td></tr>`
          : ''
      }
      <tr><td>Configuration</td><td>${json(
        postModerationBehaviorsDef.configurations[scenario.cfg],
      )}</td></tr>
    </table>
  `
}

function describeAuthor(id, user) {
  if (id === 'self') {
    return 'Self'
  }
  const attrs = []
  if (user.blocking) {
    attrs.push('Blocked account')
  }
  if (user.blockedBy) {
    attrs.push('Account blocking user')
  }
  if (user.muted) {
    attrs.push('Muted account')
  }
  if (user.mutedByList) {
    attrs.push('Muted account (by list)')
  }
  if (attrs.length) {
    return attrs.join(', ')
  }
  return 'Any other user'
}

function describeLabels(scenario) {
  const attrs = []
  const labels = scenario.labels
  for (const target in labels) {
    if (!labels[target].length) {
      continue
    }
    for (const label of labels[target]) {
      attrs.push(`<code>${label}</code> on ${LABEL_TARGETS[target] || target}`)
    }
  }
  if (attrs.length) {
    return attrs.join('<br>\n')
  }
  return 'None'
}

function booleanRow(name, val, noOverride = false) {
  return `<tr><td>${name}</td><td>${val ? '✅ Yes' : '❌ No'} ${
    noOverride ? '(⚠️ No Override)' : ''
  }</td></tr>`
}

function json(val) {
  return `<pre>${JSON.stringify(val)}</pre>`
}

export {}
